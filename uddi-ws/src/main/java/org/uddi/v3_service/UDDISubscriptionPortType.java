/*
 * Copyright 2001-2008 The Apache Software Foundation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package org.uddi.v3_service;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import org.uddi.sub_v3.DeleteSubscription;
import org.uddi.sub_v3.GetSubscriptionResults;
import org.uddi.sub_v3.Subscription;
import org.uddi.sub_v3.SubscriptionResultsList;

/**
 * This portType defines all of the UDDI subscription operations.
 *
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.5-b03- Generated
 * source version: 2.1
 *
 * The APIs in this section describe how to interact with a UDDI node
 * implementation to create and manage requests for the tracking of new and
 * changed registry content. These APIs are synchronous and are exposed via
 * SOAP, although the notifications they may generate are not. * The
 * subscription APIs are:
 *
 * · delete_subscription: Cancels one or more specified subscriptions.
 *
 * · get_subscriptionResults: Synchronously returns registry data pertaining to
 * a particular subscription within a specified time period.
 *
 * · get_subscriptions: Returns a list of existing subscriptions previously
 * saved by the subscriber.
 *
 * · save_subscription: Establishes a new subscription or changes an existing
 * one. Also used to renew existing subscriptions.
 *
 * The OPTIONAL client API is:
 *
 * · notify_subscriptionListener: A node invoked API which the client implements
 * as a subscription listener service to accept notifications containing the
 * data that changed since notify_subscriptionListener was last invoked for a
 * particular subscription.
 */
@WebService(name = "UDDI_Subscription_PortType", targetNamespace = "urn:uddi-org:v3_service")
@XmlSeeAlso({
    org.uddi.custody_v3.ObjectFactory.class,
    org.uddi.repl_v3.ObjectFactory.class,
    org.uddi.subr_v3.ObjectFactory.class,
    org.uddi.api_v3.ObjectFactory.class,
    org.uddi.vscache_v3.ObjectFactory.class,
    org.uddi.vs_v3.ObjectFactory.class,
    org.uddi.sub_v3.ObjectFactory.class,
    org.w3._2000._09.xmldsig_.ObjectFactory.class,
    org.uddi.policy_v3.ObjectFactory.class,
    org.uddi.policy_v3_instanceparms.ObjectFactory.class
})
public interface UDDISubscriptionPortType extends Remote {

    /**
     *
     * Cancels an existing subscription. authInfo: This optional argument is an
     * element that contains an authentication token. Registries that wish to
     * restrict who can delete a subscription typically require authInfo for
     * this call, though this is a matter of node policy.
     *
     * · subscriptionKey: This required argument specifies, using anyURIs, the
     * subscription or subscriptions to be deleted.
     *
     * @param body
     * @throws DispositionReportFaultMessage, RemoteException
     */
    @WebMethod(operationName = "delete_subscription", action = "delete_subscription")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public void deleteSubscription(
            @WebParam(name = "delete_subscription", targetNamespace = "urn:uddi-org:sub_v3", partName = "body") DeleteSubscription body)
            throws DispositionReportFaultMessage, RemoteException;

    /**
     *
     * @param body
     * @return returns org.uddi.sub_v3.SubscriptionResultsList
     * @throws DispositionReportFaultMessage, RemoteException
     */
    @WebMethod(operationName = "get_subscriptionResults", action = "get_subscriptionResults")
    @WebResult(name = "subscriptionResultsList", targetNamespace = "urn:uddi-org:sub_v3", partName = "body")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    public SubscriptionResultsList getSubscriptionResults(
            @WebParam(name = "get_subscriptionResults", targetNamespace = "urn:uddi-org:sub_v3", partName = "body") GetSubscriptionResults body)
            throws DispositionReportFaultMessage, RemoteException;

    /**
     * Returns the complete list of existing subscriptions owned by the
     * subscriber.
     *
     * @param authInfo authInfo: This optional argument is an element that
     * contains an authentication token. Registries that wish to restrict who
     * can obtain information on subscriptions typically require authInfo for
     * this call, though this is a matter of node policy.
     * @return returns java.util.List<org.uddi.sub_v3.Subscription> This API
     * call returns information on all of the subscriptions owned by the
     * subscriber, together with the expiration date for each. The subscriptions
     * structure returned contains zero or more subscription structures, each
     * pertaining to a subscription. Only subscriptions created by the invoking
     * subscriber are returned. See Section 5.5.8.1, [save_subscription] Syntax,
     * for details on these structures.
     * @throws DispositionReportFaultMessage, RemoteException
     */
    @WebMethod(operationName = "get_subscriptions", action = "get_subscriptions")
    @WebResult(name = "subscription", targetNamespace = "urn:uddi-org:sub_v3")
    @RequestWrapper(localName = "get_subscriptions", targetNamespace = "urn:uddi-org:sub_v3", className = "org.uddi.sub_v3.GetSubscriptions")
    @ResponseWrapper(localName = "subscriptions", targetNamespace = "urn:uddi-org:sub_v3", className = "org.uddi.sub_v3.Subscriptions")
    public List<Subscription> getSubscriptions(
            @WebParam(name = "authInfo", targetNamespace = "urn:uddi-org:api_v3") String authInfo)
            throws DispositionReportFaultMessage, RemoteException;

    /**
     * The save_subscription API registers a request to monitor specific
     * registry content and to have the node periodically notify the subscriber
     * when changes are available. Notifications are not returned synchronously
     * with results for this API. Only data that matches the requested
     * subscription criteria and which changes after the point in time that the
     * subscription request is accepted is returned to the subscriber via a
     * notification.
     *
     * This API returns a duration for which this particular subscription is
     * valid. Depending upon the policy of the Node, subscriptions need to be
     * renewed before the expiration date in order to insure that they remain
     * active. Subscriptions can also be redefined or renewed using this API.
     * The subscriptionKey pertaining to the subscription to be renewed must be
     * supplied in the save_subscription invocation in order to accomplish this.
     * This allows both renewal and changes to the subscription. Invoking
     * save_subscription automatically resets the expiration period for the
     * subscription in question to a value based upon the node’s policy.
     *     
* authInfo: This optional argument is an element that contains an
     * authentication token. Registries that wish to restrict who can save a
     * subscription typically require authInfo for this call, though this is a
     * matter of node policy.
     *
     * · bindingKey: This optional argument of type anyURI specifies the
     * bindingTemplate which the node is to use to deliver notifications to
     * subscription listeners. It is only required when asynchronous
     * notifications are used. This bindingTemplate MUST define either a Web
     * service that implements notify_subscriptionListener (see below), or an
     * email address to receive the notifications. If a
     * notify_subscriptionListener Web service is identified, the node invokes
     * it to deliver notifications. If an email address is identified, the node
     * delivers notifications via email to the address supplied. When
     * notifications are delivered via email, the body of the email contains the
     * body of the SOAP message, which would have been sent to the
     * notify_subscriptionListener service if that option had been chosen. The
     * publisher making the subscription request MUST own the bindingTemplate.
     * If this argument is not supplied, no notifications are sent, although
     * subscribers may still use the get_subscriptionResults API to obtain
     * subscription results. See Section 5.5.11 get_subscriptionResults for
     * details. If email delivery to the specified address fails, nodes MAY
     * attempt re-delivery, but are not obligated to do so. Depending upon node
     * policy, excessive delivery failures MAY result in cancellation of the
     * corresponding subscription.
     *
     * · brief: This optional argument controls the level of detail returned to
     * a subscription listener. The default is "false" when omitted. When set to
     * "true," it indicates that the subscription results are to be returned to
     * the subscriber in the form of a keyBag, listing all of the entities that
     * matched the subscriptionFilter. Refer to Section 5.5.6 Use of keyBag in
     * Subscription, for additional information. This option has no effect on
     * the assertionStatusReport structure, which is returned as part of a
     * notification when the subscriptionFilter specifies the
     * get_assertionStatusReport filter criteria. See the explanation of
     * subscriptionFilter below.
     *
     * · expiresAfter: This optional argument allows subscribers to specify the
     * period of time for which they would like the subscription to exist. It is
     * of the XML Schema type xsd:dateTime. Specifying a value for this argument
     * is no guarantee that the node will accept it without change. Information
     * on the format of expiresAfter can be found in Section 5.5.1.1 Specifying
     * Durations.
     *
     * · maxEntities: This optional integer specifies the maximum number of
     * entities in a notification returned to a subscription listener. If not
     * specified, the number of entities sent is not limited, unless by node
     * policy.
     *
     * · subscriptionFilter: This argument specifies the filtering criteria
     * which limits the scope of a subscription to a subset of registry records.
     * It is required except when renewing an existing subscription. The get_xx
     * and find_xx APIs are all valid choices for use as a subscriptionFilter.
     * Only one of these can be chosen for each subscription. Notifications,
     * based on the subscriptionFilter, are sent to the subscriber if and only
     * if there are changes at the node, which match this criterion during a
     * notification period. A subscriptionFilter MUST contain exactly one of the
     * allowed inquiry elements. The authInfo argument of the specified get_xx
     * or find_xx API call is not required here and is ignored if specified. All
     * of the other arguments supported with each of these inquiry APIs are
     * valid for use here.
     *
     * Specifying find_relatedBusinesses is useful for tracking when reciprocal
     * relationships are formed or dissolved. Specifying
     * get_assertionStatusReport can be used in tracking when reciprocal
     * relationships (which pertain to a business owned by the subscriber) are
     * formed, dissolved, or requested by the owners of some other business.
     *
     * For a get_assertionStatusReport based subscription, there is a specific
     * status value, status:both_incomplete, defined in the XML schema. When
     * appearing in an assertionStatusItem of a subscriptionResultsList,
     * status:both_incomplete indicates that the publisher assertion embedded in
     * the assertionStatusItem has been deleted from both ends.
     *
     * Note that the above handling of deleted publisher assertions is different
     * from the case when a business entity, business service, binding template,
     * or tModel is removed. In the latter case, the key to the entity in
     * question is simply put inside a keyBag. A publisher assertion, on the
     * other hand, has no key and therefore the keyBag idea is not applicable.
     *
     * · subscriptionKey: This optional argument of type anyURI identifies the
     * subscription. To renew or change an existing subscription, a valid
     * subscriptionKey MUST be provided. When establishing a new subscription,
     * the subscriptionKey MAY also be either omitted or specified as an empty
     * string in which case the node MUST assign a unique key. If
     * subscriptionKey is specified for a new subscription, the key MUST conform
     * to the registry’s policy on publisher-assigned keys.
     *
     * · notificationInterval: This optional argument is only required when
     * asynchronous notifications are used. It is of type xsd:duration and
     * specifies how often change notifications are to be provided to a
     * subscriber. If the notificationInterval specified is not acceptable due
     * to node policy, then the node adjusts the value to match the next longer
     * time period that is supported. The adjusted value is provided with the
     * returns from this API. Also see Section 5.5.1.1 Specifying Durations.
     *
     * @param subscription
     * @param authInfo
     * @throws DispositionReportFaultMessage, RemoteException
     */
    @WebMethod(operationName = "save_subscription", action = "save_subscription")
    @RequestWrapper(localName = "save_subscription", targetNamespace = "urn:uddi-org:sub_v3", className = "org.uddi.sub_v3.SaveSubscription")
    @ResponseWrapper(localName = "subscriptions", targetNamespace = "urn:uddi-org:sub_v3", className = "org.uddi.sub_v3.Subscriptions")
    public void saveSubscription(
            @WebParam(name = "authInfo", targetNamespace = "urn:uddi-org:api_v3") String authInfo,
            @WebParam(name = "subscription", targetNamespace = "urn:uddi-org:sub_v3", mode = WebParam.Mode.INOUT) Holder<List<Subscription>> subscription)
            throws DispositionReportFaultMessage, RemoteException;
}
